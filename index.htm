<!DOCTYPE html>
<html>
<head>
	<title>Sim Monitor</title>
	<meta charset='utf-8'/>
	<link rel='icon' href='res/ico.svg'/>
</head>
<body>
<div statusbar>
	<img settingsToggle src='res/settings.svg'/>
	<img src='res/x.svg'/> <b var-date></b><b var-time></b><img src='res/bat.svg'/><img src='res/net.svg'/><img src='res/snd.svg'/>
</div>

<aside settings>
	<label>HR Waveform</label>
	<select vital='hr' id='hrControl'></select>
	<label>SpO<sub>2</sub> Waveform</label>
	<select vital='spo2' id='o2Control'></select>
	<label>RR Waveform</label>
	<select vital='rr' id='rrControl'></select>
	<label>ABP Waveform</label>
	<select vital='bp' id='bpControl'></select>
</aside>

<div class='vitals-waveforms'>
	<canvas wav='hr' width='3000' height='200'></canvas>
	<canvas wav='o2' width='3000' height='200'></canvas>
	<canvas wav='rr' width='3000' height='200'></canvas>
	<canvas wav='bp' width='3000' height='200'></canvas>
</div>
<div class='vitals-numbers'>
	<div vital='HR'><input value='130'></input></div>
	<div vital='SpO2'><input value='98'></input></div>
	<div vital='RR'><input value='48'></input></div>
	<div vital='NIBP'><input value='---/--'></input></div>
	<div sub vital='Temp'><input value='98.7'></input></div>
	<div sub vital='Pulse'><input value='130'></input></div>
</div>
</body>

<script>
let l = console.log
let Waveforms = {}

Waveforms.Hr = {
	sinus : {
		amplitude: 1,
		color: '#4f4',
		cycle: {
			length: 100, // use JS to convert this to segment in canvas
			height: length*0.29
		},
		name: 'Sinus (Lead II)',
		pathCoordinates: [
			//StartPoints
			[0,0],
			//RelativeLineDrawing (Add x-px, Add y-px)
			[23,0],
		// Wave Peak #1
			[6,16],
			[6,-36],
		// Wave Peak #2
			[2, 120],
			[2, -140],
		// Wave balance
			[6,40],
			[9,0],
		// Wave peak #3
			[6, 20],
			[6, -20],
		// Wave Balance-end
			[34,0]
		]
	},
	avpaced : {
		amplitude: 1,
		color: '#4e4',
		cycle: {
			length: 100,
			height: length*0.29
		},
		name: 'AVP',
		pathCoordinates: [
			//StartPoints
			[0,0],
			// PathCoordidates
			[2,0],
			[0,-75],
			[1,75],
			[1,8],
			[1,-8],
			[3,-80],
			[2,80],
			[1,30],
			[8,-30],
			[20,0],
			[0,-75],
			[1,80],
			[1,-5],
			[7,10],
			[4,-10],
			[8,0]
		]
	},
	vfib : {
		amplitude: 1,
		color: '#4e4',
		cycle: {
			length: 50,
			height: length*0.29
		},
		name: 'VFib',
		pathCoordinates: [
			//StartPoints
			[0,0],
			// PathCoordidates
			[2,0],
			[7,14],
			[8,-26],
			[4,12],
			[4,0],
			[1,-8],
			[3,12],
			[6,2],
			[4,-6],
			[1,0],
			[14,20],
			[3,0],
			[5,-35],
			[7,15],
			[8,0]
		]
	},
	afib: {
		amplitude: 1,
		color: '#4e4',
		cycle: {
			length: 50,
			height: length*0.29
		},
		name: 'AFib',
		pathCoordinates: [
			// StartPoints
			[0,0],
			// PathCoordidates
			[7,0],
				[2,10],
				[4,-10],
				[1,3],
				[2,-3],
				[1,8],
				[2,-8],
				[1,16],
				[3,-16],
				[10,0],
				[1,16],
				[3,-16],
				[7,1],
				[3,-6],
			[3,5],
			[6,16],
				[10,-36],
			[4, 120],
				[16, -140],
			[6,40],
				[9,0],
			[6, 20],
				[6, -20],
			[2, 40],
				[1, -40],
				[1,16],
				[3,-16],
				[10,0],
				[1,16],
				[3,-16],
			[2,30],
				[1,-50],
			[4, 80],
				[10, -100],
				[8, 50],
				[20, -50],
				[6,40],
				[9,0],
			[8, 20],
				[19, -20],
				[7, 9],
				[10, -9],
				[5, 15],
				[12, -15],
				[7,0],
				[1,8],
				[2,-8],
				[1,16],
				[3,-16],
				[2,10],
				[4,-10],
				[10,0],
			[4, 120],
			[16, -120],
		]
	},
}
Waveforms.O2 = {
	normal: {
		amplitude: 1,
		color: '#4ee',
		curve: {
			smooth: 4,
			smoothX: 2,
			smoothY: 8,
		},
		cycle: {
			length: 100,
			height: length*0.29
		},
		name: 'Normal',
		pathCoordinates: [
			//StartPoints
			[0,0],
			// PathCoordidates
			[23,0],
			[8,90],
			[3,-35],
			[2,-5],
			[5,-50],
			[6,0],
		]
	},
	small_and_weak: {
		amplitude: 1,
		color: '#4ee',
		curve: {
			smooth: 4,
			smoothX: 2,
			smoothY: 8,
		},
		cycle: {
			length: 100,
			height: length*0.29
		},
		name: 'Small and Weak',
		pathCoordinates: [
			//StartPoints
			[0,0],
			// PathCoordidates
			[23,0],
			[8,40],
			[3,-15],
			[1,5],
			[2,-10],
			[9,-20],
			[6,0],
		]
	},
	large_and_bounding: {
		amplitude: 1,
		color: '#4ee',
		curve: {
			smooth: 4,
			smoothX: 2,
			smoothY: 0,
		},
		cycle: {
			length: 100,
			height: length*0.29
		},
		name: 'Large and Bounding',
		pathCoordinates: [
			//StartPoints
			[0,0],
			// PathCoordidates
			[23,0],
			[8,90],
			[10,-65],
			[8,-10],
			[16,-15],
			[6,0],
		]
	},
	pulsus_alternase: {
		amplitude: 1,
		color: '#4ee',
		curve: {
			smooth: 4,
			smoothX: 2,
			smoothY: 8,
		},
		cycle: {
			length: 100,
			height: length*0.29
			//TODO - cycle.span to make the wave cover x cycles in canvas! For complex waves like this, set 2 to stretch out over 2 cycles
		},
		name: 'Pulsus Alternanse',
		pathCoordinates: [
			//StartPoints
			[0,0],
			// PathCoordidates
			[13,0],
			[8,90],
			[3,-35],
			[2,-5],
			[5,-50],
			[6,0],
			// PathCoordidates
			[13,0],
			[8,70],
			[3,-35],
			[2,-5],
			[5,-30],
			[6,0],
		]
	},
	no_dicrotic_notch: {//TODO
		amplitude: 1,
		color: '#4ee',
		curve: {
			smooth: 4,
			smoothX: 2,
			smoothY: 8,
		},
		cycle: {
			length: 100,
			height: length*0.29
		},
		name: 'No Dicrotic Notch',
		pathCoordinates: [
			//StartPoints
			[0,0],
			// PathCoordidates
			[23,0],
			[8,40],
			[3,-15],
			[1,5],
			[2,-10],
			[9,-20],
			[6,0],
		]
	},
	chaotic: {//TODO
		amplitude: 1,
		color: '#4ee',
		curve: {
			smooth: 4,
			smoothX: 2,
			smoothY: 8,
		},
		cycle: {
			length: 100,
			height: length*0.29
		},
		name: 'Chaotic',
		pathCoordinates: [
			//StartPoints
			[0,0],
			// PathCoordidates
			[23,0],
			[8,40],
			[3,-15],
			[1,5],
			[2,-10],
			[9,-20],
			[6,0],
		]
	},

}
Waveforms.Bp = {
	normal: {
		amplitude: 1,
		color: '#e44',
		curve: {
			smooth: 0.5,
		},
		cycle: {
			length: 100,
			height: length*0.29
		},
		name: 'Normal',
		pathCoordinates: [
			//StartPoints
			[0,0],
			// PathCoordidates
			[2,95],
			[2,-25],
			[2,-45],
			[2,15],
			[8,-40],
		]
	},
}
Waveforms.Rr = {
	normal: {
		amplitude: 1,
		color: '#eee',
		cycle: {
			length: 100,
			height: length*0.29
		},
		linear: true,
		name: 'RR',
		pathCoordinates: [
			//StartPoints
			[0,0],
			// PathCoordidates
			[2,95],
			[2,0],
			[2,-95],
			[10,0]
		]
	},
}
</script>
<script>
let selectHr = document.querySelector('#hrControl')
let selectO2 = document.querySelector('#o2Control')
let selectRr = document.querySelector('#rrControl')
let selectBp = document.querySelector('#bpControl')

populateWaveformDropdown(selectHr, Waveforms.Hr, document.querySelector("[wav='hr']"))
populateWaveformDropdown(selectO2, Waveforms.O2, document.querySelector("[wav='o2']"))
populateWaveformDropdown(selectRr, Waveforms.Rr, document.querySelector("[wav='rr']"))
populateWaveformDropdown(selectBp, Waveforms.Bp, document.querySelector("[wav='bp']"))

// [{canvas, setIntervalHandleId}]
var waveformAnimationQueue = [];


/**
 * Renders and animates a waveform in the given canvas for the provided ms, defaults to 20ms
 **/
function animateWaveformContext(waveform, container, animationSpeed) {
	if (!container.getContext) return
	if (!animationSpeed) animationSpeed = 22 

	let c = container.getContext('2d')
	let currentPositionX = 0
	let intervalHandle = window.setInterval(()=>{
		c.clearRect(0,0, c.canvas.width, c.canvas.height)
		renderWaveInCanvas(waveform, container)
		drawVerticalLineAt(currentPositionX, c)
		currentPositionX += c.canvas.width * 0.003
		if (currentPositionX >= c.canvas.width) {
			currentPositionX = 0
			c.moveTo(0,0)
		}
	}, animationSpeed)

	if (waveformAnimationQueue) {
		waveformAnimationQueue.push({canvas: container, intervalId: intervalHandle})
		for (let queue_i = 0; queue_i<waveformAnimationQueue.length; queue_i++) {
			let animationQueue = waveformAnimationQueue[queue_i]
			if (animationQueue.canvas == container && animationQueue.intervalId != intervalHandle) {
				window.clearInterval(animationQueue.intervalId)
				waveformAnimationQueue.splice(queue_i, 1)
			}
		}
	}
}


/**
 * Draws a thick vertical line at a location for animation purposes
 **/
function drawVerticalLineAt(xLocation, context, offset) {
	if (!offset) offset = 0

	let bgColor = window.getComputedStyle(document.body, null).getPropertyValue('background-color')
	let c = context
	let lineHeight = c.canvas.height
	let lineWidth = 20 + offset
	lineWidth = context.canvas.width * 0.015
	let oldStrokeStyle = c.strokeStyle

	c.beginPath()
	c.lineWidth = lineWidth
	oldStrokeStyle = c.strokeStyle
	c.strokeStyle = 'black'
	if (bgColor) c.strokeStyle = bgColor
	c.moveTo(xLocation, 0)
	c.lineTo(xLocation, lineHeight)
	c.stroke()
}


/**
 * Plots the coordinate points to the context from the waveform.
 * useExactCoordinates can be used to draw the coordinates as exact values instead of relative.
 * Returns the relative, non-exact, coordinates for usage with looping.
 **/
function drawWave(context, waveform, useExactCoordinates) {
	let c = context
	let coordinates = waveform.pathCoordinates
	let xy_prev = coordinates[0]
	let xy_last = xy_prev
  
	for (let xy_i=1; xy_i<coordinates.length; xy_i++) {
		let xy = coordinates[xy_i]
		let x = xy[0]
		let y = xy[1]*waveform.amplitude
		let newX = xy_prev[0]+x
		let newY = xy_prev[1]-y

		// Will interpret values as EXACT PIXEL locations to draw and ignores assumed relative locations //
		if (useExactCoordinates) {
			newX = x
			newY = y
		}

		// Calculate the exact point location in canvas from relative (percent-based) drawing coordinates //
		let xper = (x, log)=> {
			let val = waveform.cycle.length*(x/100)
			if (log) l('x: '+x+' '+val)
			return val
		}
		let yper = (y, log)=> {
			let val = waveform.cycle.height*(y/100)
			if (log) l('y: '+y+' '+val)
			return y
		}

		// Placing the coordinates uses the exact values from the calculations //
		c.moveTo(
			xper(xy_prev[0]),
			yper(xy_prev[1])
		)
		if (waveform.linear && waveform.linear == true) {
			c.lineTo( xper(newX), yper(newY) )
		}
		else {
			let  curveStrength = [0,-2]
			let  xCurveStrength = curveStrength
			let yCurveStrength = [0,0]
			xCurveStrength = getCalculatedStrengthValues(waveform,'smoothX')
			yCurveStrength = getCalculatedStrengthValues(waveform,'smoothY')
			//ctrlPt1x, ctrlPt1y, cp2x, cp2y, x,y
			c.bezierCurveTo(
				// Control Points
				xper(newX-xCurveStrength[0]), yper(newY-yCurveStrength[0]),
				xper(newX-xCurveStrength[1]), yper(newY-yCurveStrength[1]),
				// Coordinates
				xper(newX), 
				yper(newY)
			)
		}

		// Values stored do not use exact locations to ensure that waveform path data keeps consistent //
		xy_prev = [newX,newY]
		xy_last = [newX,newY]
	}
	return xy_last
}

let stopLoopNum = 0
function getCalculatedStrengthValues(waveform, curveTargetXY) {
	let defaultStrength = [2,2]
	let defaultCurveStrengthX = [0,-2]
	let defaultCurveStrengthY = [0,0]

	if (!waveform.curve) return defaultStrength
	if (!curveTargetXY) curveTargetXY = 'smooth'

	let validCurveStrengthFields = ['smooth', 'smoothX', 'smoothY']
	for (let key in waveform.curve) {
		let currentCurveField = waveform.curve[key]
		if (!validCurveStrengthFields.includes(key)) {
			continue
		}

		if (key == curveTargetXY || key == 'smooth') {
			if (currentCurveField.length) {
				defaultStrength = currentCurveField
				continue
			}
			defaultStrength = [currentCurveField, currentCurveField]
		}
	}

	return defaultStrength
}


/**
 * Assigns select options from HR waveform with optional canvas to control
 **/
function populateWaveformDropdown(select, waveforms, canvas) {
//function populateHrWaveformDropdown(select, canvas) {
	if (!canvas) {
		canvas = document.querySelector("[wav]")
	}

	let defaultOption = document.createElement('option')
	defaultOption.innerHTML = '--'
	defaultOption.value = null
	select.innerHTML = ''
	select.appendChild(defaultOption)

	for (let waveform in waveforms) {
		let option = document.createElement('option')
		option.value = waveform
		option.innerHTML = waveforms[waveform].name
		select.appendChild(option)
	}

	select.onchange = ()=> {
		setCanvasWaveToSelectValue(select, waveforms, canvas)
	}
}

/**
 * Renders the waveform to the context, repeated by the numberOfCycles.
 **/
function renderWave(context, waveform, numberOfCycles) {
	context.beginPath()
	waveform.pathCoordinates[0] = [0,context._containerHeight/2]
	for (let phaseNumber = 0; phaseNumber<=numberOfCycles-2; phaseNumber++) {
		waveform.pathCoordinates[0] = drawWave(context, waveform)
	}
	drawWave(context, waveform)
	context.stroke()
}


/**
 * Draws the provided waveform in the given context.
 **/
function renderWaveInCanvas(waveform, container) {
	if (!container.getContext) return

	let c = container.getContext('2d')
	c._containerHeight = c.canvas.height
	c._containerWidth = c.canvas.width
	setWaveformWidth(waveform, c.canvas.width)

	c.lineCap = 'round'
	c.lineJoin = 'round'
	let waveColor = '#44f'
	let waveStrength = 3
	if (waveform.color) waveColor = waveform.color
	if (waveform.strength) waveStrength = waveform.strength
	c.lineWidth = waveStrength * (container.offsetWidth / 800)
	c.strokeStyle = waveColor
	renderWave(c, waveform, 8)
	return c
}


/**
 * Sets the wave in a canvas based off of the select's value
 **/
function setCanvasWaveToSelectValue(select, waveforms, canvas) {
	for (let waveId in waveforms) {
		if (select.value == waveId) {
			animateWaveformContext(waveforms[waveId], canvas)
		} 
	}
}


/**
 * Adjusts waveform's total width to a given value
 **/
function setWaveformWidth(waveform, value) {
	let maxX= 0
	for (let i=0; i<waveform.pathCoordinates.length; i++) {
		maxX+= waveform.pathCoordinates[i][0]
	}
	waveform.cycle.length = (value/maxX)*100
}

setTimeout(()=> {
	let select = document.querySelector('#hrControl')
	select.selectedIndex = 1
	setCanvasWaveToSelectValue(select, Waveforms.Hr, document.querySelector("[wav='hr']"))
}, 5)
setTimeout(()=>{
	let selectO2 = document.querySelector('#o2Control')
	selectO2.selectedIndex = 1
	setCanvasWaveToSelectValue(selectO2, Waveforms.O2, document.querySelector("[wav='o2']"))
}, 10)
setTimeout(()=>{
	selectRr.selectedIndex = 1
	setCanvasWaveToSelectValue(selectRr, Waveforms.Rr, document.querySelector("[wav='rr']"))
}, 15)
setTimeout(()=>{
	selectBp.selectedIndex = 1
	setCanvasWaveToSelectValue(selectBp, Waveforms.Bp, document.querySelector("[wav='bp']"))
}, 20)
</script>
<script>
let varDate = document.querySelector('[var-date]')
let varTime = document.querySelector('[var-time]')

setInterval(()=>{
	let now = new Date()
	let h = now.getHours(), m = now.getMinutes(), s = now.getSeconds()
	let mm = now.getMonth()+1, dd = now.getDate(), yy = now.getFullYear()

	if (h < 10) h = `0${h}`
	if (m < 10) m = `0${m}`
	if (s < 10) s = `0${s}`

	let date = `${mm}/${dd}/${yy}`
	let time = `${h}:${m}:${s}`
	varDate.innerHTML = date
	varTime.innerHTML = time
}, 1000)

let vitalsDivs = document.querySelectorAll('[vital]')
for (let divs_i in vitalsDivs) {
	if (isNaN(divs_i)) continue
	let div = vitalsDivs[divs_i]
	let b = document.createElement('b')
	let vitalType = div.getAttribute('vital')
	div.classList.add(vitalType.toLowerCase())
	b.innerHTML = vitalType
	b.onclick = ()=> {
		if (div.classList.contains('disabled') == false) {
			div.classList.add('disabled')
		}
		else {
			div.classList.remove('disabled')
		}
		let input = div.querySelector('input')
		if (input.value == '') {
			input.value = input.getAttribute('value-last')
			input.setAttribute('value-last', '')
		}
		else {
			input.setAttribute('value-last', input.value)
			input.value = ''
		}
	}
	div.appendChild(b)
}

let settingsTogglers = document.querySelectorAll('[settingsToggle]')
for (let setTgl_i=0; setTgl_i<settingsTogglers.length; setTgl_i++) {
	let settingsToggle =  settingsTogglers[setTgl_i]
	let settingsPanel = document.querySelector('[settings]')
	settingsToggle.onclick = ()=>{
		if (settingsPanel.classList.contains('hide')) {
			settingsPanel.classList.remove('hide')
			settingsToggle.src = 'res/settings-cancel.svg'
		}
		else {
			settingsPanel.classList.add('hide')
			settingsToggle.src = 'res/settings.svg'
		}
	}
	settingsPanel.classList.add('hide')
}
</script>
<style>
* {
	background: none;
	margin: 0;
	padding: 0;
}
:root {
	--border-big: 0.2em;
	--border-small: 0.15em;
	--border-thick: 0.3em;
	--border-thin: 0.1em;
	--box-big: 18vw;
	--box-small: 8vw;
	--color-background: #111;
	--color-light: #eee;
}
html ,
input {
	background: none;
	border: none;
	color: var(--color-light);
}
html {
	background: var(--color-background);
	font-family: 'Sans', sans-serif;
}
body {
	background: var(--color-background);
	padding: 4rem;
	padding-top: 10%;
	position: relative;
}
canvas[wav] {
	background: var(--color-background);
	border: solid var(--border-thin) var(--color-light);
	display: block;
	height: 7em;
}
.disabled b {
	text-decoration: line-through;
}
[settings] {
	bottom: 0;
	position: fixed;
}
[settingsToggle]:hover,
select:hover {
	cursor: pointer;
}
[statusbar] {
	display: flex;
	left: 0;
	padding-top: 2em;
	position: fixed;
	top: 0;
	width: 100%;
}
[statusbar] * {
	flex-grow: 100%;
	height: 10%;
	margin: 0 5%;
	max-height: 2em;
}
[vital] {
	border: solid var(--border-thin) var(--color-light);
	border-radius: 0.5rem;
	display: block;
	height: var(--box-big);
	position: relative;
	vertical-align: top;
	width: var(--box-big);
}
[vital] b {
	left: 0;
	position: absolute;
	top: 0;
}
[vital] input {
	bottom: 0;
	font-size: 350%;
	font-weight: bold;
	height: 100%;
	position: relative absolute;
	right: 0;
	text-align: center;
	width: 100%;
}
[sub][vital] {
	display: inline-block;
	height: var(--box-small);
	width: var(--box-small);
}
[sub][vital] input {
	font-size: 150%;
}
[wav] {
	float:left;
	height: 7em;
}
[vital],
[sub][vital] {
	background: var(--color-background);
	height:7em;
	width:10em;
}
.hide,
.hidden {
	display: none;
}
.hr,
.hr * {
	color: #4e4;
}
.spo2,
.spo2 * {
	color: #4ee;
}
.rr,
.rr * {
	color: #eee;
}
.nibp,
.nibp * {
	color: #e44;
}
.vitals-numbers,
.vitals-waveforms {
	display: inline;
	top: 0;
	width: 80%;
}
.vitals-numbers {
	float: right;
	width: 20%;
}
.vitals-waveforms {
	float: left;
}
.vitals-waveforms * {
	width: 100%;
}
</style>
</html>
